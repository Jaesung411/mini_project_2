AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # VPC 생성
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      Tags:
        - Key: 'Name'
          Value: 'MyWebAppVPC'

  # 서브넷 생성
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'MyWebAppPublicSubnet1'

  # 서브넷 생성
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'MyWebAppPublicSubnet2'

  # 인터넷 게이트웨이 생성
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'MyWebAppInternetGateway'

  # VPC와 인터넷 게이트웨이 연결
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # 라우트 테이블 생성
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: 'Name'
          Value: 'MyWebAppRouteTable'

  # 기본 라우트 설정
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # 서브넷과 라우트 테이블 연결
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  # 보안 그룹 생성
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: 'Allow HTTP and SSH traffic'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # HTTP 허용
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # SSH 허용
        

  # # EC2 인스턴스 생성
  # MyEC2Instance1:
  #   Type: 'AWS::EC2::Instance'
  #   Properties:
  #     InstanceType: 't3.micro'
  #     ImageId: 'ami-0e577819b2a6cc996'  # AWS에서 제공하는 기본 AMI ID
  #     SubnetId: !Ref PublicSubnet1
  #     SecurityGroupIds:
  #       - !Ref MySecurityGroup
  #     Tags:
  #       - Key: 'Name'
  #         Value: 'MyWebAppInstance'
 
  # Launch Template 생성
  MyLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: 'MyWebAppLaunchTemplate'
      LaunchTemplateData:
        InstanceType: 't3.micro'
        ImageId: 'ami-0e577819b2a6cc996'
        SecurityGroupIds:
          - !Ref MySecurityGroup
        KeyName: 'mykeypair'   # EC2에 접근하기 위한 키페어 이름
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: 'Name'
                Value: 'AutoScalingInstance'

  # Auto Scaling Group 생성
  MyAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: '1'  # 최소 EC2 인스턴스 수
      MaxSize: '5'  # 최대 EC2 인스턴스 수
      DesiredCapacity: '2'  # 기본 EC2 인스턴스 수
      TargetGroupARNs:
        - !Ref MyTargetGroup
      Tags:
        - Key: 'Name'
          Value: 'AutoScalingInstance'
          PropagateAtLaunch: true
  
  # Load Balancer 생성
  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: 'MyWebAppELB'
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MySecurityGroup
      Tags:
        - Key: 'Name'
          Value: 'MyWebAppLoadBalancer'
  
  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: 'MyWebAppTargetGroup'
      Protocol: HTTP
      Port: 80
      VpcId: !Ref MyVPC
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 10  # 헬스체크 간격
      HealthCheckTimeoutSeconds: 5  # 응답 제한 시간
      HealthyThresholdCount: 2  # 정상 판정 기준
      UnhealthyThresholdCount: 2  # 비정상 판정 기준
      TargetType: instance
      Tags:
        - Key: 'Name'
          Value: 'MyWebAppTargetGroup'

  # Listener 생성
  MyLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup